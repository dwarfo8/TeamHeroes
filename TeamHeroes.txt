behaviour("TeamHeroes")

-- config variables
local isPercentConfig = false					-- use number or percent config

local numBlueHeroes = 1							-- number of heroes on blue team
local numRedHeroes = 1							-- number of heroes on red team

local percentBlueHeroes = 1						-- percent of heroes on blue team
local percentRedHeroes = 1						-- percent of heroes on red team

local isDisablePlayerRandSelectHero = false 	-- lets the player be randomly selected as a hero, disabling this means player will never be chosen
local isPlayerAlwaysHero = false				-- player will always start the game as a hero, overrides any other settings

local heroMaxHealth = 200						-- game gives this amount of health to heroes when they are chosen

local isDisableResupplyHealth = false			-- disable health resupply
local resupplyTimeHealth = 1					-- delay in seconds for health resupply around hero
local resupplyRangeHealth = 20					-- game units of how far health resupplies around hero

local isDisableResupplyAmmo = false				-- disable ammo resupply
local resupplyTimeAmmo = 1						-- delay in seconds for ammo resupply around hero
local resupplyRangeAmmo = 20					-- game units of how far health resupplies around hero

local isDisableHeroDamage = false				-- disable hero proximity damage
local damageTime = 1							-- delay in seconds for damage around hero
local damageRange = 20							-- game units of how far units are damaged around hero
local damageAmount = 5							-- damage amount to surrounding units

local flagScale = 1								-- size of the flag
local isDisableFlag = false						-- disables hero flag
local isShowFlagVehicle = false					-- only shows flag when hero is in vehicle
local isDisableSkin = false						-- disables hero skin

local isDisableOverheal = false					-- disable ally overheal
local overhealRange = 20						-- game units of how far units are affected by overheal around hero
local overhealMax = 150							-- max overheal amount for allies

local isDisableRecruit = false					-- disable ally recruit
local recruitRange = 50							-- recruit range
local recruitAmount = 5							-- number of units in the hero's squad

-- private variables
local heroBlueArray = {}
local heroRedArray = {}
local heroAllArray = {}
local heroBlueDict = {}
local heroRedDict = {}
local flagPrefab = nil
local heroSkinBlue = nil
local heroSkinRed = nil
local heroSkinHandsBlue = nil
local heroSkinHandsRed = nil
local heroSkinFootBlue = nil
local heroSkinFootRed = nil
local mutatorScript = nil
local allyBlueInitHealthDict = {}
local allyRedInitHealthDict = {}
local overhealTime = 1
local recruitTime = 1
local flagVehicleTime = 1
local heroSquadDict = {}
local heroSquadUpdateTime = 1

function TeamHeroes:initializeHero(heroArray, numHeroes, percentHeroes, team, teamColor, heroSkin, heroSkinFoot, heroDict)
	-- get actors on team
	local actorArray = ActorManager.GetActorsOnTeam(team)

	-- exit if there are no actors
	if (#actorArray == 0) then
		return
	end

	print("TEAM: " .. tostring(team))
	print("Number of actors: " .. tostring(#actorArray))

	-- remove player from array if specified
	if (isDisablePlayerRandSelectHero and not isPlayerAlwaysHero) then
		for i,actor in ipairs(actorArray) do
			if (actor == Player.actor) then
				table.remove(actorArray, i)
			end
		end
	end

	-- check if using percent config or number config
	if (isPercentConfig) then
		numHeroes = math.ceil((percentHeroes / 100) * #actorArray)	-- always round up
	end

	-- error check number of heroes
	if (numHeroes > #actorArray) then
		numHeroes = #actorArray
	elseif (numHeroes < 0) then
		numHeroes = 0
	end

	print("Number of Heroes: " .. numHeroes)

	-- exit if hero count is zero
	if (numHeroes == 0) then
		return
	end

	-- create random non-repeating array
	local randNonRepeatArray = {}

	-- automatically add player to array if specified
	if (isPlayerAlwaysHero and (Player.actor.team == team)) then
		for i,actor in ipairs(actorArray) do
			if (actor == Player.actor) then
				table.insert(randNonRepeatArray, i)
			end
		end
	end

	-- add to random non-repeating array
	while #randNonRepeatArray < numHeroes do
		-- generate random index
		local r = math.random(1,#actorArray)
		local duplicate = false
		-- check if number is player's number
		if (isDisablePlayerrandNonRepeatArrayelectHero and (actorArray[r] == Player.actor)) then
			duplicate = true
		end
		-- check if number is already in random array
		for i,num in ipairs(randNonRepeatArray) do
			if (num == r) then
				duplicate = true
				break
			end
		end
		if not (duplicate) then
			table.insert(randNonRepeatArray, r)
		end
	end

	-- create hero array for team, setup health, flag, skin
	for i=1,numHeroes,1 do
		-- pick random actor as hero
		local selectedHeroNum = table.remove(randNonRepeatArray, #randNonRepeatArray)
		table.insert(heroArray, actorArray[selectedHeroNum])
		table.insert(heroAllArray, actorArray[selectedHeroNum])
		print("Index: " .. tostring(selectedHeroNum) .. " | Hero: " .. tostring(heroArray[#heroArray].name))

		-- add to hero dict
		heroDict[heroArray[#heroArray]] = true

		-- set health for hero
		heroArray[#heroArray].maxHealth = heroMaxHealth
		local healthToAdd = -heroMaxHealth + heroArray[#heroArray].health
		heroArray[#heroArray].Damage(healthToAdd)

		-- set flag to hero
		if not (isDisableFlag) then
			flagPrefab.transform.GetChild(0).localScale = Vector3(flagScale, flagScale, flagScale)	-- scale flag
			local heroFlag = GameObject.Instantiate(flagPrefab)
			heroFlag.transform.SetParent(heroArray[#heroArray].transform)
			-- flag position for bots and player
			if (heroArray[#heroArray] ~= Player.actor) then
				-- bot's soldier model
				heroFlag.transform.position = heroArray[#heroArray].transform.GetChild(0).position
			else
				-- player's soldier model
				heroFlag.transform.position = heroArray[#heroArray].transform.GetChild(1).position
				-- make sure flag is not blocking view of camera
				heroFlag.transform.rotation = PlayerCamera.fpCamera.gameObject.transform.GetChild(0).rotation
			end
			-- change flag color according to team
			heroFlag.transform.GetChild(0).GetChild(1).GetChild(0).GetChild(0).gameObject.GetComponent(Renderer).material.color = teamColor		-- static flag
			heroFlag.transform.GetChild(0).GetChild(1).GetChild(0).GetChild(1).gameObject.GetComponent(Renderer).material.color = teamColor		-- cloth physics flag
		end

		-- hero model mesh
		local heroModelMesh = heroSkin.transform.GetChild(1).gameObject.GetComponent(SkinnedMeshRenderer).sharedMesh
		local heroModelMaterial = heroSkin.transform.GetChild(1).gameObject.GetComponent(SkinnedMeshRenderer).sharedMaterials

		-- change hero skin
		if not (isDisableSkin) then
			if (heroArray[#heroArray] ~= Player.actor) then
				-- bot skin
				-- soldier model
				local heroSoldierSMR = heroArray[#heroArray].transform.GetChild(0).GetChild(1).gameObject.GetComponent(SkinnedMeshRenderer)
				heroSoldierSMR.sharedMesh = heroModelMesh
				heroSoldierSMR.sharedMaterials = heroModelMaterial
				-- ragdoll model
				local heroRagdollSMR = heroArray[#heroArray].transform.GetChild(1).GetChild(1).gameObject.GetComponent(SkinnedMeshRenderer)
				heroRagdollSMR.sharedMesh = heroModelMesh
				heroRagdollSMR.sharedMaterials = heroModelMaterial
			else
				-- player skin
				-- soldier model
				local heroSoldierSMR = heroArray[#heroArray].transform.GetChild(1).GetChild(1).gameObject.GetComponent(SkinnedMeshRenderer)
				heroSoldierSMR.sharedMesh = heroModelMesh
				heroSoldierSMR.sharedMaterials = heroModelMaterial
				-- ragdoll model
				local heroRagdollSMR = heroArray[#heroArray].transform.GetChild(2).GetChild(1).gameObject.GetComponent(SkinnedMeshRenderer)
				heroRagdollSMR.sharedMesh = heroModelMesh
				heroRagdollSMR.sharedMaterials = heroModelMaterial
				-- kickfoot model
				local kickfootSMR = GameObject.Find("Player Fps Actor(Clone)").transform.GetChild(0).GetChild(0).GetChild(2).GetChild(1).gameObject.GetComponent(SkinnedMeshRenderer)
				kickfootSMR.sharedMesh = heroSkinFoot.transform.GetChild(1).gameObject.GetComponent(SkinnedMeshRenderer).sharedMesh
				kickfootSMR.sharedMaterials = heroSkinFoot.transform.GetChild(1).gameObject.GetComponent(SkinnedMeshRenderer).sharedMaterials
			end
		end
	end
	print("----------")

	return
end

function TeamHeroes:initializeHealthDict(heroArray, team, allyInitHealthDict)
	-- actors on team
	local actorsArray = ActorManager.GetActorsOnTeam(team)

	-- create temp health dict
	local tempInitHealthDict = {}
	for i,actor in ipairs(actorsArray) do
		tempInitHealthDict[actor] = actor.health
	end

	-- remove heroes from temp health dict
	for i,hero in ipairs(heroArray) do
		tempInitHealthDict[hero] = nil
	end

	-- add to actual ally health dict
	for actor,initHealth in pairs(tempInitHealthDict) do
		if (initHealth ~= nil) then
			allyInitHealthDict[actor] = initHealth
		end
	end
end

function TeamHeroes:OverhealAlly(heroArray, team, allyInitHealthDict)
	-- create copy of health dictionary for ally outside of range
	local allyOutOfRangeHealthDict = {}
	for i,j in pairs(allyInitHealthDict) do
		allyOutOfRangeHealthDict[i] = j
	end
	
	-- overheal health if near hero
	for i,hero in ipairs(heroArray) do
		-- check if hero is dead
		-- NOTE: body still stays around after killed
		if not (hero.isDead) then
			local actorsArray = ActorManager.AliveActorsInRange(hero.position, overhealRange)
			for j,actor in ipairs(actorsArray) do
				-- check actor team color
				if (actor.team == team and allyInitHealthDict[actor] ~= nil) then
					actor.maxHealth = overhealMax
					allyOutOfRangeHealthDict[actor] = nil
				end
				coroutine.yield()
			end
		end
	end

	-- set to base health for ally out of range
	for actor,initHealth in pairs(allyOutOfRangeHealthDict) do
		if (initHealth ~= nil) then
			actor.maxHealth = initHealth
			if (actor.health > actor.maxHealth) then
				actor.ResupplyHealth()	
			end
		end
	end
end

function TeamHeroes:ResupplyHealthSurround(heroArray, team)
	for i,hero in ipairs(heroArray) do
		-- check if hero is dead
		-- NOTE: body still stays around after killed
		if not (hero.isDead) then
			-- heal self and surrounding team
			local actorsArray = ActorManager.AliveActorsInRange(hero.position, resupplyRangeHealth)
			for j,actor in ipairs(actorsArray) do
				-- check actor team color
				if (actor.team == team) then
					actor.ResupplyHealth()
				end
				coroutine.yield()
			end
		end
	end
end

function TeamHeroes:ResupplyAmmoSurround(heroArray, team)
	for i,hero in ipairs(heroArray) do
		-- check if hero is dead
		-- NOTE: body still stays around after killed
		if not (hero.isDead) then
			-- ammo self and surrounding team
			local actorsArray = ActorManager.AliveActorsInRange(hero.position, resupplyRangeAmmo)
			for j,actor in ipairs(actorsArray) do
				-- check actor team color
				if (actor.team == team) then
					actor.ResupplyAmmo()
				end
				coroutine.yield()
			end
		end
	end
end

function TeamHeroes:DamageSurround(heroArray, team)
	for i,hero in ipairs(heroArray) do
		-- check if hero is dead
		-- NOTE: body still stays around after killed
		if not (hero.isDead) then
			local actorsArray = ActorManager.AliveActorsInRange(hero.position, damageRange)
			for j,actor in ipairs(actorsArray) do
				-- check actor team color
				if (actor.team ~= team and ActorManager.ActorsCanSeeEachOther(hero, actor)) then
					local heroDamage = DamageInfo()
					heroDamage.healthDamage = damageAmount
					heroDamage.direction =  actor.position - hero.position
					actor.Damage(hero, heroDamage)
				end
				coroutine.yield()
			end
		end
	end
end


function TeamHeroes:AttackAndRecruitAlly()
	-- loop through all heroes
	for i,hero in ipairs(heroAllArray) do
		-- exit if hero squad doesn't exist
		if (hero.squad == nil) then
			return
		end

		-- get nearby actors
		local actorsArray = ActorManager.AliveActorsInRange(hero.squad.leader.position, recruitRange)

		-- if squad is not attacking, add hero to a nearby squad that is attacking
		if ((hero.squad.order ~= nil) and (hero.squad.order.type ~= OrderType.Attack) and (hero.squad.leader ~= Player.actor)) then
			for i,actor in ipairs(actorsArray) do
				-- note: do not steal from player's squad
				if ((actor.team == hero.team) and (actor.squad.order ~= nil) and (actor.squad.order.type == OrderType.Attack) and (actor.squad.leader ~= Player.actor) and (hero.isSeated == false) and (hero.activeVehicle == nil)) then
					actor.squad.AddMember(hero)
					break
				end
				coroutine.yield()
			end
		end

		-- check if recruit is on
		if (isDisableRecruit) then
			return
		end

		-- recruit nearby soldiers
		for i,actor in ipairs(actorsArray) do
			-- check if squads exists
			if ((hero.squad ~= nil) and (actor.squad ~= nil)) then
				-- recruit for player first
				if (hero == Player.actor) then
					if ((#hero.squad.members < recruitAmount) and (actor.team == hero.team) and (actor ~= Player.actor) and (actor.squad.leader ~= Player.actor) and (actor.isSeated == false) and (hero.activeVehicle == nil)) then
						hero.squad.AddMember(actor)
					end
				else
					-- note: do not steal from player's squad and do not steal from other hero's squad
					if ((#hero.squad.members < recruitAmount) and (actor.team == hero.team) and (actor ~= Player.actor) and (actor.squad.leader ~= Player.actor) and (heroSquadDict[actor.squad.leader] == nil) and (actor.isSeated == false) and (hero.activeVehicle == nil)) then
						print("HELLO")
						hero.squad.AddMember(actor)
					end
				end
				if (#hero.squad.members >= recruitAmount) then
					break
				end
			end
			coroutine.yield()
		end
	end
end

function TeamHeroes:FlagVisibility()
	-- loop through all heroes
	for i,hero in ipairs(heroAllArray) do
		-- check if player
		if (hero == Player.actor) then
			-- check if player is seated
			if (hero.isSeated) then
				hero.transform.GetChild(4).gameObject.SetActive(true)
			else
				hero.transform.GetChild(4).gameObject.SetActive(false)
			end
		else
			-- check if bot seated
			if (hero.isSeated) then
				hero.transform.GetChild(3).gameObject.SetActive(true)
			else
				hero.transform.GetChild(3).gameObject.SetActive(false)
			end
		end
	end
end

function TeamHeroes:SetHeroSkinFps()
	-- check if blue or red team
	local heroSkinHands = nil
	local heroSkinFoot = nil
	if (Player.team == Team.blue) then
		heroSkinHands = heroSkinHandsBlue
	else
		heroSkinHands = heroSkinHandsRed
	end

	-- wait for weapon models to load
	while (GameObject.Find("Player Fps Actor(Clone)").transform.GetChild(0).GetChild(0).childCount == 1) do
		coroutine.yield(WaitForSeconds(0.1))
	end

	-- apply hands skin to hero player
	local weaponParentTrans = GameObject.Find("Player Fps Actor(Clone)").transform.GetChild(0).GetChild(0).GetChild(1).GetChild(0)
	numEquipment = weaponParentTrans.childCount - 1
	for i = 0,numEquipment,1 do
		-- find skinned mesh renderer gameobject
		local numWeaponChildren = weaponParentTrans.GetChild(i).childCount -1
		for j = 0,numWeaponChildren,1 do
			local handsSMR = weaponParentTrans.GetChild(i).GetChild(j).gameObject.GetComponent(SkinnedMeshRenderer)
			if (handsSMR ~= nil) then
				handsSMR.sharedMesh = heroSkinHands.transform.GetChild(1).gameObject.GetComponent(SkinnedMeshRenderer).sharedMesh
				handsSMR.sharedMaterials = heroSkinHands.transform.GetChild(1).gameObject.GetComponent(SkinnedMeshRenderer).sharedMaterials
				break
			end
		end
	end
end

function TeamHeroes:setConfigurationVariables()
	local configChoice = mutatorScript.GetConfigurationDropdown("isPercentConfig")
	if (configChoice == 0) then
		isPercentConfig = false
	else
		isPercentConfig = true
	end

	numBlueHeroes = mutatorScript.GetConfigurationInt("numBlueHeroes")
	numRedHeroes = mutatorScript.GetConfigurationInt("numRedHeroes")

	percentBlueHeroes = mutatorScript.GetConfigurationRange("percentBlueHeroes")
	percentRedHeroes = mutatorScript.GetConfigurationRange("percentRedHeroes")

	local randomlySelectConfig = mutatorScript.GetConfigurationDropdown("randomlySelectConfig")
	if (randomlySelectConfig == 0) then
		isDisablePlayerRandSelectHero = false
		isPlayerAlwaysHero = false
	elseif (randomlySelectConfig == 1) then
		isDisablePlayerRandSelectHero = true
		isPlayerAlwaysHero = false
	elseif (randomlySelectConfig == 2) then
		isDisablePlayerRandSelectHero = false
		isPlayerAlwaysHero = true
	end

	heroMaxHealth = mutatorScript.GetConfigurationInt("heroMaxHealth")

	isDisableResupplyHealth = mutatorScript.GetConfigurationBool("isDisableResupplyHealth")
	resupplyTimeHealth = mutatorScript.GetConfigurationFloat("resupplyTimeHealth")
	resupplyRangeHealth = mutatorScript.GetConfigurationInt("resupplyRangeHealth")

	isDisableResupplyAmmo = mutatorScript.GetConfigurationBool("isDisableResupplyAmmo")
	resupplyTimeAmmo = mutatorScript.GetConfigurationFloat("resupplyTimeAmmo")
	resupplyRangeAmmo = mutatorScript.GetConfigurationInt("resupplyRangeAmmo")

	isDisableHeroDamage = mutatorScript.GetConfigurationBool("isDisableHeroDamage")
	damageTime = mutatorScript.GetConfigurationFloat("damageTime")
	damageRange = mutatorScript.GetConfigurationInt("damageRange")
	damageAmount = mutatorScript.GetConfigurationInt("damageAmount")

	flagScale = mutatorScript.GetConfigurationFloat("flagScale")

	isShowFlag = mutatorScript.GetConfigurationDropdown("isShowFlag")
	if (isShowFlag == 0) then
		isDisableFlag = false
		isShowFlagVehicle = false
	elseif (isShowFlag == 1) then
		isDisableFlag = true
		isShowFlagVehicle = false
	else
		isDisableFlag = false
		isShowFlagVehicle = true
	end

	isDisableSkin = mutatorScript.GetConfigurationBool("isDisableSkin")

	isDisableOverheal = mutatorScript.GetConfigurationBool("isDisableOverheal")
	overhealRange = mutatorScript.GetConfigurationInt("overhealRange")
	overhealMax = mutatorScript.GetConfigurationInt("overhealMax")

	isDisableRecruit = mutatorScript.GetConfigurationBool("isDisableRecruit")
	recruitRange = mutatorScript.GetConfigurationInt("recruitRange")
	recruitAmount = mutatorScript.GetConfigurationInt("recruitAmount")
end

function TeamHeroes:OverhealStartBlue()
	while not (isDisableOverheal) do
		self:OverhealAlly(heroBlueArray, Team.Blue, allyBlueInitHealthDict)
		coroutine.yield(WaitForSeconds(overhealTime))
	end
end

function TeamHeroes:OverhealStartRed()
	while not (isDisableOverheal) do
		self:OverhealAlly(heroRedArray, Team.Red, allyRedInitHealthDict)
		coroutine.yield(WaitForSeconds(overhealTime))
	end
end

function TeamHeroes:ResupplyHealthStartBlue()
	while not (isDisableResupplyHealth) do
		self:ResupplyHealthSurround(heroBlueArray, Team.Blue)
		coroutine.yield(WaitForSeconds(resupplyTimeHealth))
	end
end

function TeamHeroes:ResupplyHealthStartRed()
	while not (isDisableResupplyHealth) do
		self:ResupplyHealthSurround(heroRedArray, Team.Red)
		coroutine.yield(WaitForSeconds(resupplyTimeHealth))
	end
end

function TeamHeroes:ResupplyAmmoStartBlue()
	while not (isDisableResupplyAmmo) do
		self:ResupplyAmmoSurround(heroBlueArray, Team.Blue)
		coroutine.yield(WaitForSeconds(resupplyTimeAmmo))
	end
end

function TeamHeroes:ResupplyAmmoStartRed()
	while not (isDisableResupplyAmmo) do
		self:ResupplyAmmoSurround(heroRedArray, Team.Red)
		coroutine.yield(WaitForSeconds(resupplyTimeAmmo))
	end
end

function TeamHeroes:HeroDamageStartBlue()
	while not (isDisableHeroDamage) do
		self:DamageSurround(heroBlueArray, Team.Blue)
		coroutine.yield(WaitForSeconds(damageTime))
	end
end

function TeamHeroes:HeroDamageStartRed()
	while not (isDisableHeroDamage) do
		self:DamageSurround(heroRedArray, Team.Red)
		coroutine.yield(WaitForSeconds(damageTime))
	end
end

function TeamHeroes:AttackAndRecruitAllyStart()
	while (true) do
		self:AttackAndRecruitAlly()
		coroutine.yield(WaitForSeconds(recruitTime))
	end
end

function TeamHeroes:FlagVisibilityStart()
	while (isShowFlagVehicle and (not isDisableFlag)) do
		self:FlagVisibility()
		coroutine.yield(WaitForSeconds(flagVehicleTime))
	end
end

function TeamHeroes:SetHeroSkinFpsStart(actor)
	-- exit if skin is disabled
	if (isDisableSkin) then
		return
	end

	-- exit if not player
	if (actor ~= Player.actor) then
		return
	end

	-- exit if player is not hero
	if (Player.team == Team.blue) then
		heroDict = heroBlueDict
	else
		heroDict = heroRedDict
	end
	if (heroDict[Player.actor] == nil) then
		return
	end

	self.script.StartCoroutine("SetHeroSkinFps")
end

function TeamHeroes:UpdateHeroSquadDict()
	while (true) do
		-- loop through all heroes
		for i,hero in ipairs(heroAllArray) do
			if (hero.squad ~= nil) then
				heroSquadDict[hero.squad.leader] = true
			end
			coroutine.yield()
		end
		coroutine.yield(WaitForSeconds(heroSquadUpdateTime))
	end
end

function TeamHeroes:RemoveHeroSquadDict(actor)
	heroSquadDict[actor] = nil
end

function TeamHeroes:Start()
	-- clear variables
	heroBlueArray = {}
	heroRedArray = {}
	heroAllArray = {}
	heroBlueDict = {}
	heroRedDict = {}
	flagPrefab = self.targets.flag
	heroSkinBlue = self.targets.heroSkinBlue
	heroSkinRed = self.targets.heroSkinRed
	heroSkinHandsBlue = self.targets.heroSkinHandsBlue
	heroSkinHandsRed = self.targets.heroSkinHandsRed
	heroSkinFootBlue = self.targets.heroSkinFootBlue
	heroSkinFootRed = self.targets.heroSkinFootRed
	allyBlueInitHealthDict = {}
	allyRedInitHealthDict = {}
	heroSquadDict = {}

	-- load user's settings
	mutatorScript = self.script.mutator
	self:setConfigurationVariables()

	-- make sure numbers are random
	math.randomseed(Time.time)

	-- initialize heroes
	self:initializeHero(heroBlueArray, numBlueHeroes, percentBlueHeroes, Team.Blue, Color.blue, heroSkinBlue, heroSkinFootBlue, heroBlueDict)
	self:initializeHero(heroRedArray, numRedHeroes, percentRedHeroes, Team.Red, Color.red, heroSkinRed, heroSkinFootRed, heroRedDict)

	-- initialize health dictionary
	self:initializeHealthDict(heroBlueArray, Team.Blue, allyBlueInitHealthDict)
	self:initializeHealthDict(heroRedArray, Team.Red, allyRedInitHealthDict)

	--
	-- GameEvents
	--

	-- apply skin to hero player arms and feet
	GameEvents.onActorSpawn.AddListener(self, "SetHeroSkinFpsStart")

	-- remove squad leader from hero dict if possible
	GameEvents.onActorDied.AddListener(self, "RemoveHeroSquadDict")

	--
	-- Coroutines
	--

	-- update hero squad dictionary
	self.script.StartCoroutine("UpdateHeroSquadDict")

	-- recruit allies
	self.script.StartCoroutine("AttackAndRecruitAllyStart")

	-- overheal ally units
	self.script.StartCoroutine("OverhealStartBlue")
	self.script.StartCoroutine("OverhealStartRed")

	-- resupply health to units around hero, including hero
	self.script.StartCoroutine("ResupplyHealthStartBlue")
	self.script.StartCoroutine("ResupplyHealthStartRed")

	-- resupply ammo to units around hero, including hero
	self.script.StartCoroutine("ResupplyAmmoStartBlue")
	self.script.StartCoroutine("ResupplyAmmoStartRed")

	-- damage units around hero
	self.script.StartCoroutine("HeroDamageStartBlue")
	self.script.StartCoroutine("HeroDamageStartRed")

	-- flag visibility
	self.script.StartCoroutine("FlagVisibilityStart")
end
