behaviour("TeamHeroes")

-- config variables
local isPercentConfig = false					-- use number or percent config

local numBlueHeroes = 1							-- number of heroes on blue team
local numRedHeroes = 1							-- number of heroes on red team

local percentBlueHeroes = 1						-- percent of heroes on blue team
local percentRedHeroes = 1						-- percent of heroes on red team

local isDisablePlayerRandSelectHero = false 	-- lets the player be randomly selected as a hero, disabling this means player will never be chosen
local isPlayerAlwaysHero = false				-- player will always start the game as a hero, overrides any other settings

local heroMaxHealth = 300						-- game gives this amount of health to heroes when they are chosen

local isDisableResupplyHealth = false			-- disable health resupply
local resupplyTimeHealth = 1					-- delay in seconds for health resupply around hero
local resupplyRangeHealth = 20					-- game units of how far health resupplies around hero

local isDisableResupplyAmmo = false				-- disable ammo resupply
local resupplyTimeAmmo = 1						-- delay in seconds for ammo resupply around hero
local resupplyRangeAmmo = 20					-- game units of how far health resupplies around hero

local isDisableHeroDamage = false				-- disable hero proximity damage
local damageTime = 1							-- delay in seconds for damage around hero
local damageRange = 20							-- game units of how far units are damaged around hero
local damageAmount = 10							-- damage amount to surrounding units

local flagScale = 1								-- size of the flag
local isDisableFlag = false						-- disables hero flag
local isDisableSkin = false						-- disables hero skin

local isDisableOverheal = false					-- disable ally overheal
local overhealRange = 20						-- game units of how far units are affected by overheal around hero
local overhealMax = 150							-- max overheal amount for allies

local isDisableRecruit = false					-- disable ally recruit
local recruitRange = 100						-- recruit range
local recruitAmount = 4							-- number of allies that should be added to the hero's squad

-- private variables
local stopwatchHealth = 0
local stopwatchAmmo = 0
local stopwatchDamage = 0
local heroBlueArray = {}
local heroRedArray = {}
local flagPrefab = nil
local heroSkinBlue = nil
local heroSkinRed = nil
local mutatorScript = nil
local allyBlueInitHealthDict = {}
local allyRedInitHealthDict = {}
local stopwatchOverheal = 0
local overhealTime = 1

function initializeHero(heroArray, numHeroes, percentHeroes, team, teamColor, heroSkin)
	-- get actors on team
	local actorArray = ActorManager.GetActorsOnTeam(team)
	print("TEAM: " .. tostring(team))
	print("Number of actors: " .. tostring(#actorArray))

	-- remove player from array if specified
	if (isDisablePlayerRandSelectHero and not isPlayerAlwaysHero) then
		for i,actor in ipairs(actorArray) do
			if (actor == Player.actor) then
				table.remove(actorArray, i)
			end
		end
	end

	-- check if using percent config or number config
	if (isPercentConfig) then
		numHeroes = math.ceil((percentHeroes / 100) * #actorArray)	-- always round up
	end

	-- error check number of heroes
	if (numHeroes > #actorArray) then
		numHeroes = #actorArray
	elseif (numHeroes < 0) then
		numHeroes = 0
	end

	print("Number of Heroes: " .. numHeroes)

	-- exit if hero count is zero
	if (numHeroes == 0) then
		return
	end

	-- create random non-repeating array
	local randNonRepeatArray = {}
	-- automatically add player to array if specified
	if (isPlayerAlwaysHero and (Player.actor.team == team)) then
		for i,actor in ipairs(actorArray) do
			if (actor == Player.actor) then
				table.insert(randNonRepeatArray, i)
			end
		end
	end

	-- add to random non-repeating array
	while #randNonRepeatArray < numHeroes do
		-- generate random index
		local r = math.random(1,#actorArray)
		local duplicate = false
		-- check if number is player's number
		if (isDisablePlayerrandNonRepeatArrayelectHero and (actorArray[r] == Player.actor)) then
			duplicate = true
		end
		-- check if number is already in random array
		for i,num in ipairs(randNonRepeatArray) do
			if (num == r) then
				duplicate = true
				break
			end
		end
		if not (duplicate) then
			table.insert(randNonRepeatArray, r)
		end
	end

	-- create hero array for team, setup health, flag, skin
	for i=1,numHeroes,1 do
		-- pick random actor as hero
		local selectedHeroNum = table.remove(randNonRepeatArray, #randNonRepeatArray)
		table.insert(heroArray, actorArray[selectedHeroNum])
		print("Index: " .. tostring(selectedHeroNum) .. " | Hero: " .. tostring(heroArray[#heroArray].name))

		-- set health for hero
		heroArray[#heroArray].maxHealth = heroMaxHealth
		local healthToAdd = -heroMaxHealth + heroArray[#heroArray].health
		heroArray[#heroArray].Damage(healthToAdd)

		-- set flag to hero
		if not (isDisableFlag) then
			flagPrefab.transform.GetChild(0).localScale = Vector3(flagScale, flagScale, flagScale)	-- scale flag
			local heroFlag = GameObject.Instantiate(flagPrefab)
			heroFlag.transform.SetParent(heroArray[#heroArray].transform)
			-- flag position for bots and player
			if (heroArray[#heroArray] ~= Player.actor) then
				-- bot's soldier model
				heroFlag.transform.position = heroArray[#heroArray].transform.GetChild(0).position
			else
				-- player's soldier model
				heroFlag.transform.position = heroArray[#heroArray].transform.GetChild(1).position
				-- make sure flag is not blocking view of camera
				heroFlag.transform.rotation = PlayerCamera.fpCamera.gameObject.transform.GetChild(0).rotation
			end
			-- change flag color according to team
			heroFlag.transform.GetChild(0).GetChild(1).GetChild(0).GetChild(0).gameObject.GetComponent(Renderer).material.color = teamColor		-- static flag
			heroFlag.transform.GetChild(0).GetChild(1).GetChild(0).GetChild(1).gameObject.GetComponent(Renderer).material.color = teamColor		-- cloth physics flag
		end

		-- set material to hero skin
		if not (isDisableSkin) then
			if (heroArray[#heroArray] ~= Player.actor) then
				-- player skin
				heroArray[#heroArray].transform.GetChild(0).GetChild(1).gameObject.GetComponent(Renderer).material = heroSkin	-- soldier model
				heroArray[#heroArray].transform.GetChild(1).GetChild(1).gameObject.GetComponent(Renderer).material = heroSkin	-- ragdoll model
			else
				-- bot skin
				heroArray[#heroArray].transform.GetChild(1).GetChild(1).gameObject.GetComponent(Renderer).material = heroSkin	-- soldier model
				heroArray[#heroArray].transform.GetChild(2).GetChild(1).gameObject.GetComponent(Renderer).material = heroSkin	-- ragdoll model
			end
		end
	end
	print("----------")

	return
end

function initializeHealthDict(heroArray, team, allyInitHealthDict)
	-- actors on team
	local actorsArray = ActorManager.GetActorsOnTeam(team)

	-- create temp health dict
	local tempInitHealthDict = {}
	for i,actor in ipairs(actorsArray) do
		tempInitHealthDict[actor] = actor.health
	end

	-- remove heroes from temp health dict
	for i,hero in ipairs(heroArray) do
		tempInitHealthDict[hero] = nil
	end

	-- add to actual ally health dict
	for actor,initHealth in pairs(tempInitHealthDict) do
		if (initHealth ~= nil) then
			allyInitHealthDict[actor] = initHealth
		end
	end
end

function OverhealAlly(heroArray, team, allyInitHealthDict)
	-- create copy of health dictionary for ally outside of range
	local allyOutOfRangeHealthDict = {}
	for i,j in pairs(allyInitHealthDict) do
		allyOutOfRangeHealthDict[i] = j
	end
	
	-- overheal health if near hero
	for i,hero in ipairs(heroArray) do
		-- check if hero is dead
		-- NOTE: body still stays around after killed
		if not (hero.isDead) then
			local actorsArray = ActorManager.AliveActorsInRange(hero.position, overhealRange)
			for j,actor in ipairs(actorsArray) do
				-- check actor team color
				if (actor.team == team and allyInitHealthDict[actor] ~= nil) then
					actor.maxHealth = overhealMax
					allyOutOfRangeHealthDict[actor] = nil
				end
			end
		end
	end

	-- set to base health for ally out of range
	for i,hero in ipairs(heroArray) do
		for actor,initHealth in pairs(allyOutOfRangeHealthDict) do
			if (initHealth ~= nil) then
				actor.maxHealth = initHealth
				if (actor.health > actor.maxHealth) then
					actor.ResupplyHealth()	
				end
			end
		end
	end
end

function ResupplyHealthSurround(heroArray, team)
	for i,hero in ipairs(heroArray) do
		-- check if hero is dead
		-- NOTE: body still stays around after killed
		if not (hero.isDead) then
			-- heal self and surrounding team
			local actorsArray = ActorManager.AliveActorsInRange(hero.position, resupplyRangeHealth)
			for j,actor in ipairs(actorsArray) do
				-- check actor team color
				if (actor.team == team) then
					actor.ResupplyHealth()
				end
			end
		end
	end
end

function ResupplyAmmoSurround(heroArray, team)
	for i,hero in ipairs(heroArray) do
		-- check if hero is dead
		-- NOTE: body still stays around after killed
		if not (hero.isDead) then
			-- ammo self and surrounding team
			local actorsArray = ActorManager.AliveActorsInRange(hero.position, resupplyRangeAmmo)
			for j,actor in ipairs(actorsArray) do
				-- check actor team color
				if (actor.team == team) then
					actor.ResupplyAmmo()
				end
			end
		end
	end
end

function DamageSurround(heroArray, team)
	for i,hero in ipairs(heroArray) do
		-- check if hero is dead
		-- NOTE: body still stays around after killed
		if not (hero.isDead) then
			local actorsArray = ActorManager.AliveActorsInRange(hero.position, damageRange)
			for j,actor in ipairs(actorsArray) do
				-- check actor team color
				if (actor.team ~= team and ActorManager.ActorsCanSeeEachOther(hero, actor)) then
					local heroDamage = DamageInfo()
					heroDamage.healthDamage = damageAmount
					heroDamage.direction =  actor.position - hero.position
					actor.Damage(hero, heroDamage)
				end
			end
		end
	end
end

function TeamHeroes:RecruitAlly(squad)
	-- Get team and team's heroArray
	local team = squad.leader.team
	local heroArray = {}
	if (team == Team.Blue) then
		heroArray = heroBlueArray
	else
		heroArray = heroRedArray
	end

	-- check if squad contains a hero
	local isHeroSquad = false
	for i,hero in ipairs(heroArray) do
		local squadArray = squad.members
		for j,actor in ipairs(squadArray) do
			if (actor == hero) then
				isHeroSquad = true
				break
			end
		end
	end

	-- recruit nearby soldiers
	if (isHeroSquad) then
		local actorsArray = ActorManager.AliveActorsInRange(squad.leader.position, recruitRange)
		for i,actor in ipairs(actorsArray) do
			if ((#squad.members < recruitAmount) and (actor.team == team) and (actor ~= Player.actor)) then
				squad.AddMember(actor)
			end
		end
	end
end

function setConfigurationVariables()
	local configChoice = mutatorScript.GetConfigurationDropdown("isPercentConfig")
	if (configChoice == 0) then
		isPercentConfig = false
	else
		isPercentConfig = true
	end

	numBlueHeroes = mutatorScript.GetConfigurationInt("numBlueHeroes")
	numRedHeroes = mutatorScript.GetConfigurationInt("numRedHeroes")

	percentBlueHeroes = mutatorScript.GetConfigurationRange("percentBlueHeroes")
	percentRedHeroes = mutatorScript.GetConfigurationRange("percentRedHeroes")

	local randomlySelectConfig = mutatorScript.GetConfigurationDropdown("randomlySelectConfig")
	if (randomlySelectConfig == 0) then
		isDisablePlayerRandSelectHero = false
		isPlayerAlwaysHero = false
	elseif (randomlySelectConfig == 1) then
		isDisablePlayerRandSelectHero = true
		isPlayerAlwaysHero = false
	elseif (randomlySelectConfig == 2) then
		isDisablePlayerRandSelectHero = false
		isPlayerAlwaysHero = true
	end

	heroMaxHealth = mutatorScript.GetConfigurationInt("heroMaxHealth")

	isDisableResupplyHealth = mutatorScript.GetConfigurationBool("isDisableResupplyHealth")
	resupplyTimeHealth = mutatorScript.GetConfigurationFloat("resupplyTimeHealth")
	resupplyRangeHealth = mutatorScript.GetConfigurationInt("resupplyRangeHealth")

	isDisableResupplyAmmo = mutatorScript.GetConfigurationBool("isDisableResupplyAmmo")
	resupplyTimeAmmo = mutatorScript.GetConfigurationFloat("resupplyTimeAmmo")
	resupplyRangeAmmo = mutatorScript.GetConfigurationInt("resupplyRangeAmmo")

	isDisableHeroDamage = mutatorScript.GetConfigurationBool("isDisableHeroDamage")
	damageTime = mutatorScript.GetConfigurationFloat("damageTime")
	damageRange = mutatorScript.GetConfigurationInt("damageRange")
	damageAmount = mutatorScript.GetConfigurationInt("damageAmount")

	flagScale = mutatorScript.GetConfigurationFloat("flagScale")
	isDisableFlag = mutatorScript.GetConfigurationBool("isDisableFlag")
	isDisableSkin = mutatorScript.GetConfigurationBool("isDisableSkin")

	isDisableOverheal = mutatorScript.GetConfigurationBool("isDisableOverheal")
	overhealRange = mutatorScript.GetConfigurationInt("overhealRange")
	overhealMax = mutatorScript.GetConfigurationInt("overhealMax")

	isDisableRecruit = mutatorScript.GetConfigurationBool("isDisableRecruit")
	recruitRange = mutatorScript.GetConfigurationInt("recruitRange")
	recruitAmount = mutatorScript.GetConfigurationInt("recruitAmount")
end

function TeamHeroes:Start()
	-- clear variables
	heroBlueArray = {}
	heroRedArray = {}
	stopwatchHealth = 0
	stopwatchAmmo = 0
	stopwatchDamage = 0
	flagPrefab = self.targets.flag
	heroSkinBlue = self.targets.heroSkinBlue
	heroSkinRed = self.targets.heroSkinRed
	allyBlueInitHealthDict = {}
	allyRedInitHealthDict = {}
	stopwatchOverheal = 0

	-- load user's settings
	mutatorScript = self.script.mutator
	setConfigurationVariables()

	-- make sure numbers are random
	math.randomseed(Time.time)

	-- initialize heroes
	local actorBlueArray = ActorManager.GetActorsOnTeam(Team.Blue)
	if (#actorBlueArray >= 1) then
		initializeHero(heroBlueArray, numBlueHeroes, percentBlueHeroes, Team.Blue, Color.blue, heroSkinBlue)
	end
	local actorRedArray = ActorManager.GetActorsOnTeam(Team.Red)
	if (#actorRedArray >= 1) then
		initializeHero(heroRedArray, numRedHeroes, percentRedHeroes, Team.Red, Color.red, heroSkinRed)
	end

	-- initialize health dictionary
	initializeHealthDict(heroBlueArray, Team.Blue, allyBlueInitHealthDict)
	initializeHealthDict(heroRedArray, Team.Red, allyRedInitHealthDict)

	-- recruit ally units
	if not (isDisableRecruit) then
		GameEvents.onSquadCreated.AddListener(self, "RecruitAlly")
	end
end

function TeamHeroes:Update()
	-- overheal ally units
	if not (isDisableOverheal) then
		stopwatchOverheal = stopwatchOverheal + Time.deltaTime
		if (stopwatchOverheal >= overhealTime) then
			OverhealAlly(heroBlueArray, Team.Blue, allyBlueInitHealthDict)
			OverhealAlly(heroRedArray, Team.Red, allyRedInitHealthDict)
			stopwatchOverheal = 0
		end
	end

	-- resupply health to units around hero, including hero
	if not (isDisableResupplyHealth) then
		stopwatchHealth = stopwatchHealth + Time.deltaTime
		if (stopwatchHealth >= resupplyTimeHealth) then
			ResupplyHealthSurround(heroBlueArray, Team.Blue)
			ResupplyHealthSurround(heroRedArray, Team.Red)
			stopwatchHealth = 0
		end
	end

	-- resupply ammo to units around hero, including hero
	if not (isDisableResupplyAmmo) then
		stopwatchAmmo = stopwatchAmmo + Time.deltaTime
		if (stopwatchAmmo >= resupplyTimeAmmo) then
			ResupplyAmmoSurround(heroBlueArray, Team.Blue)
			ResupplyAmmoSurround(heroRedArray, Team.Red)
			stopwatchAmmo = 0
		end
	end

	-- damage units around hero
	if not (isDisableHeroDamage) then
		stopwatchDamage = stopwatchDamage + Time.deltaTime
		if (stopwatchDamage >= damageTime) then
			DamageSurround(heroBlueArray, Team.Blue)
			DamageSurround(heroRedArray, Team.Red)
			stopwatchDamage = 0
		end
	end
end
